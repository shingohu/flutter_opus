// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

import 'dynamic_library.dart';

/// Bindings for `src/opus/include/opus_multistream.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class OpusMultistream {
  /// Holds the symbol lookup function.
  ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      get _lookup => dylib.lookup;

  /// Gets the size of an OpusMSEncoder structure.
  /// @param streams <tt>int</tt>: The total number of streams to encode from the
  /// input.
  /// This must be no more than 255.
  /// @param coupled_streams <tt>int</tt>: Number of coupled (2 channel) streams
  /// to encode.
  /// This must be no larger than the total
  /// number of streams.
  /// Additionally, The total number of
  /// encoded channels (<code>streams +
  /// coupled_streams</code>) must be no
  /// more than 255.
  /// @returns The size in bytes on success, or a negative error code
  /// (see @ref opus_errorcodes) on error.
  int opus_multistream_encoder_get_size(
    int streams,
    int coupled_streams,
  ) {
    return _opus_multistream_encoder_get_size(
      streams,
      coupled_streams,
    );
  }

  late final _opus_multistream_encoder_get_sizePtr =
      _lookup<ffi.NativeFunction<opus_int32 Function(ffi.Int, ffi.Int)>>(
          'opus_multistream_encoder_get_size');
  late final _opus_multistream_encoder_get_size =
      _opus_multistream_encoder_get_sizePtr
          .asFunction<int Function(int, int)>();

  int opus_multistream_surround_encoder_get_size(
    int channels,
    int mapping_family,
  ) {
    return _opus_multistream_surround_encoder_get_size(
      channels,
      mapping_family,
    );
  }

  late final _opus_multistream_surround_encoder_get_sizePtr =
      _lookup<ffi.NativeFunction<opus_int32 Function(ffi.Int, ffi.Int)>>(
          'opus_multistream_surround_encoder_get_size');
  late final _opus_multistream_surround_encoder_get_size =
      _opus_multistream_surround_encoder_get_sizePtr
          .asFunction<int Function(int, int)>();

  /// Allocates and initializes a multistream encoder state.
  /// Call opus_multistream_encoder_destroy() to release
  /// this object when finished.
  /// @param Fs <tt>opus_int32</tt>: Sampling rate of the input signal (in Hz).
  /// This must be one of 8000, 12000, 16000,
  /// 24000, or 48000.
  /// @param channels <tt>int</tt>: Number of channels in the input signal.
  /// This must be at most 255.
  /// It may be greater than the number of
  /// coded channels (<code>streams +
  /// coupled_streams</code>).
  /// @param streams <tt>int</tt>: The total number of streams to encode from the
  /// input.
  /// This must be no more than the number of channels.
  /// @param coupled_streams <tt>int</tt>: Number of coupled (2 channel) streams
  /// to encode.
  /// This must be no larger than the total
  /// number of streams.
  /// Additionally, The total number of
  /// encoded channels (<code>streams +
  /// coupled_streams</code>) must be no
  /// more than the number of input channels.
  /// @param[in] mapping <code>const unsigned char[channels]</code>: Mapping from
  /// encoded channels to input channels, as described in
  /// @ref opus_multistream. As an extra constraint, the
  /// multistream encoder does not allow encoding coupled
  /// streams for which one channel is unused since this
  /// is never a good idea.
  /// @param application <tt>int</tt>: The target encoder application.
  /// This must be one of the following:
  /// <dl>
  /// <dt>#OPUS_APPLICATION_VOIP</dt>
  /// <dd>Process signal for improved speech intelligibility.</dd>
  /// <dt>#OPUS_APPLICATION_AUDIO</dt>
  /// <dd>Favor faithfulness to the original input.</dd>
  /// <dt>#OPUS_APPLICATION_RESTRICTED_LOWDELAY</dt>
  /// <dd>Configure the minimum possible coding delay by disabling certain modes
  /// of operation.</dd>
  /// </dl>
  /// @param[out] error <tt>int *</tt>: Returns #OPUS_OK on success, or an error
  /// code (see @ref opus_errorcodes) on
  /// failure.
  ffi.Pointer<OpusMSEncoder> opus_multistream_encoder_create(
    int Fs,
    int channels,
    int streams,
    int coupled_streams,
    ffi.Pointer<ffi.UnsignedChar> mapping,
    int application,
    ffi.Pointer<ffi.Int> error,
  ) {
    return _opus_multistream_encoder_create(
      Fs,
      channels,
      streams,
      coupled_streams,
      mapping,
      application,
      error,
    );
  }

  late final _opus_multistream_encoder_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OpusMSEncoder> Function(
              opus_int32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('opus_multistream_encoder_create');
  late final _opus_multistream_encoder_create =
      _opus_multistream_encoder_createPtr.asFunction<
          ffi.Pointer<OpusMSEncoder> Function(int, int, int, int,
              ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<OpusMSEncoder> opus_multistream_surround_encoder_create(
    int Fs,
    int channels,
    int mapping_family,
    ffi.Pointer<ffi.Int> streams,
    ffi.Pointer<ffi.Int> coupled_streams,
    ffi.Pointer<ffi.UnsignedChar> mapping,
    int application,
    ffi.Pointer<ffi.Int> error,
  ) {
    return _opus_multistream_surround_encoder_create(
      Fs,
      channels,
      mapping_family,
      streams,
      coupled_streams,
      mapping,
      application,
      error,
    );
  }

  late final _opus_multistream_surround_encoder_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OpusMSEncoder> Function(
                  opus_int32,
                  ffi.Int,
                  ffi.Int,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Int,
                  ffi.Pointer<ffi.Int>)>>(
      'opus_multistream_surround_encoder_create');
  late final _opus_multistream_surround_encoder_create =
      _opus_multistream_surround_encoder_createPtr.asFunction<
          ffi.Pointer<OpusMSEncoder> Function(
              int,
              int,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.Int>)>();

  /// Initialize a previously allocated multistream encoder state.
  /// The memory pointed to by \a st must be at least the size returned by
  /// opus_multistream_encoder_get_size().
  /// This is intended for applications which use their own allocator instead of
  /// malloc.
  /// To reset a previously initialized state, use the #OPUS_RESET_STATE CTL.
  /// @see opus_multistream_encoder_create
  /// @see opus_multistream_encoder_get_size
  /// @param st <tt>OpusMSEncoder*</tt>: Multistream encoder state to initialize.
  /// @param Fs <tt>opus_int32</tt>: Sampling rate of the input signal (in Hz).
  /// This must be one of 8000, 12000, 16000,
  /// 24000, or 48000.
  /// @param channels <tt>int</tt>: Number of channels in the input signal.
  /// This must be at most 255.
  /// It may be greater than the number of
  /// coded channels (<code>streams +
  /// coupled_streams</code>).
  /// @param streams <tt>int</tt>: The total number of streams to encode from the
  /// input.
  /// This must be no more than the number of channels.
  /// @param coupled_streams <tt>int</tt>: Number of coupled (2 channel) streams
  /// to encode.
  /// This must be no larger than the total
  /// number of streams.
  /// Additionally, The total number of
  /// encoded channels (<code>streams +
  /// coupled_streams</code>) must be no
  /// more than the number of input channels.
  /// @param[in] mapping <code>const unsigned char[channels]</code>: Mapping from
  /// encoded channels to input channels, as described in
  /// @ref opus_multistream. As an extra constraint, the
  /// multistream encoder does not allow encoding coupled
  /// streams for which one channel is unused since this
  /// is never a good idea.
  /// @param application <tt>int</tt>: The target encoder application.
  /// This must be one of the following:
  /// <dl>
  /// <dt>#OPUS_APPLICATION_VOIP</dt>
  /// <dd>Process signal for improved speech intelligibility.</dd>
  /// <dt>#OPUS_APPLICATION_AUDIO</dt>
  /// <dd>Favor faithfulness to the original input.</dd>
  /// <dt>#OPUS_APPLICATION_RESTRICTED_LOWDELAY</dt>
  /// <dd>Configure the minimum possible coding delay by disabling certain modes
  /// of operation.</dd>
  /// </dl>
  /// @returns #OPUS_OK on success, or an error code (see @ref opus_errorcodes)
  /// on failure.
  int opus_multistream_encoder_init(
    ffi.Pointer<OpusMSEncoder> st,
    int Fs,
    int channels,
    int streams,
    int coupled_streams,
    ffi.Pointer<ffi.UnsignedChar> mapping,
    int application,
  ) {
    return _opus_multistream_encoder_init(
      st,
      Fs,
      channels,
      streams,
      coupled_streams,
      mapping,
      application,
    );
  }

  late final _opus_multistream_encoder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSEncoder>,
              opus_int32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('opus_multistream_encoder_init');
  late final _opus_multistream_encoder_init =
      _opus_multistream_encoder_initPtr.asFunction<
          int Function(ffi.Pointer<OpusMSEncoder>, int, int, int, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int opus_multistream_surround_encoder_init(
    ffi.Pointer<OpusMSEncoder> st,
    int Fs,
    int channels,
    int mapping_family,
    ffi.Pointer<ffi.Int> streams,
    ffi.Pointer<ffi.Int> coupled_streams,
    ffi.Pointer<ffi.UnsignedChar> mapping,
    int application,
  ) {
    return _opus_multistream_surround_encoder_init(
      st,
      Fs,
      channels,
      mapping_family,
      streams,
      coupled_streams,
      mapping,
      application,
    );
  }

  late final _opus_multistream_surround_encoder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSEncoder>,
              opus_int32,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('opus_multistream_surround_encoder_init');
  late final _opus_multistream_surround_encoder_init =
      _opus_multistream_surround_encoder_initPtr.asFunction<
          int Function(
              ffi.Pointer<OpusMSEncoder>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  /// Encodes a multistream Opus frame.
  /// @param st <tt>OpusMSEncoder*</tt>: Multistream encoder state.
  /// @param[in] pcm <tt>const opus_int16*</tt>: The input signal as interleaved
  /// samples.
  /// This must contain
  /// <code>frame_size*channels</code>
  /// samples.
  /// @param frame_size <tt>int</tt>: Number of samples per channel in the input
  /// signal.
  /// This must be an Opus frame size for the
  /// encoder's sampling rate.
  /// For example, at 48 kHz the permitted values
  /// are 120, 240, 480, 960, 1920, and 2880.
  /// Passing in a duration of less than 10 ms
  /// (480 samples at 48 kHz) will prevent the
  /// encoder from using the LPC or hybrid modes.
  /// @param[out] data <tt>unsigned char*</tt>: Output payload.
  /// This must contain storage for at
  /// least \a max_data_bytes.
  /// @param [in] max_data_bytes <tt>opus_int32</tt>: Size of the allocated
  /// memory for the output
  /// payload. This may be
  /// used to impose an upper limit on
  /// the instant bitrate, but should
  /// not be used as the only bitrate
  /// control. Use #OPUS_SET_BITRATE to
  /// control the bitrate.
  /// @returns The length of the encoded packet (in bytes) on success or a
  /// negative error code (see @ref opus_errorcodes) on failure.
  int opus_multistream_encode(
    ffi.Pointer<OpusMSEncoder> st,
    ffi.Pointer<opus_int16> pcm,
    int frame_size,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_data_bytes,
  ) {
    return _opus_multistream_encode(
      st,
      pcm,
      frame_size,
      data,
      max_data_bytes,
    );
  }

  late final _opus_multistream_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSEncoder>,
              ffi.Pointer<opus_int16>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              opus_int32)>>('opus_multistream_encode');
  late final _opus_multistream_encode = _opus_multistream_encodePtr.asFunction<
      int Function(ffi.Pointer<OpusMSEncoder>, ffi.Pointer<opus_int16>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  /// Encodes a multistream Opus frame.
  /// @param st <tt>OpusMSEncoder*</tt>: Multistream encoder state.
  /// @param[in] pcm <tt>const opus_int32*</tt>: The input signal as interleaved
  /// samples representing (or slightly exceeding) 24-bit values.
  /// This must contain
  /// <code>frame_size*channels</code>
  /// samples.
  /// @param frame_size <tt>int</tt>: Number of samples per channel in the input
  /// signal.
  /// This must be an Opus frame size for the
  /// encoder's sampling rate.
  /// For example, at 48 kHz the permitted values
  /// are 120, 240, 480, 960, 1920, and 2880.
  /// Passing in a duration of less than 10 ms
  /// (480 samples at 48 kHz) will prevent the
  /// encoder from using the LPC or hybrid modes.
  /// @param[out] data <tt>unsigned char*</tt>: Output payload.
  /// This must contain storage for at
  /// least \a max_data_bytes.
  /// @param [in] max_data_bytes <tt>opus_int32</tt>: Size of the allocated
  /// memory for the output
  /// payload. This may be
  /// used to impose an upper limit on
  /// the instant bitrate, but should
  /// not be used as the only bitrate
  /// control. Use #OPUS_SET_BITRATE to
  /// control the bitrate.
  /// @returns The length of the encoded packet (in bytes) on success or a
  /// negative error code (see @ref opus_errorcodes) on failure.
  int opus_multistream_encode24(
    ffi.Pointer<OpusMSEncoder> st,
    ffi.Pointer<opus_int32> pcm,
    int frame_size,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_data_bytes,
  ) {
    return _opus_multistream_encode24(
      st,
      pcm,
      frame_size,
      data,
      max_data_bytes,
    );
  }

  late final _opus_multistream_encode24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSEncoder>,
              ffi.Pointer<opus_int32>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              opus_int32)>>('opus_multistream_encode24');
  late final _opus_multistream_encode24 =
      _opus_multistream_encode24Ptr.asFunction<
          int Function(ffi.Pointer<OpusMSEncoder>, ffi.Pointer<opus_int32>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  /// Encodes a multistream Opus frame from floating point input.
  /// @param st <tt>OpusMSEncoder*</tt>: Multistream encoder state.
  /// @param[in] pcm <tt>const float*</tt>: The input signal as interleaved
  /// samples with a normal range of
  /// +/-1.0.
  /// Samples with a range beyond +/-1.0
  /// are supported but will be clipped by
  /// decoders using the integer API and
  /// should only be used if it is known
  /// that the far end supports extended
  /// dynamic range.
  /// This must contain
  /// <code>frame_size*channels</code>
  /// samples.
  /// @param frame_size <tt>int</tt>: Number of samples per channel in the input
  /// signal.
  /// This must be an Opus frame size for the
  /// encoder's sampling rate.
  /// For example, at 48 kHz the permitted values
  /// are 120, 240, 480, 960, 1920, and 2880.
  /// Passing in a duration of less than 10 ms
  /// (480 samples at 48 kHz) will prevent the
  /// encoder from using the LPC or hybrid modes.
  /// @param[out] data <tt>unsigned char*</tt>: Output payload.
  /// This must contain storage for at
  /// least \a max_data_bytes.
  /// @param [in] max_data_bytes <tt>opus_int32</tt>: Size of the allocated
  /// memory for the output
  /// payload. This may be
  /// used to impose an upper limit on
  /// the instant bitrate, but should
  /// not be used as the only bitrate
  /// control. Use #OPUS_SET_BITRATE to
  /// control the bitrate.
  /// @returns The length of the encoded packet (in bytes) on success or a
  /// negative error code (see @ref opus_errorcodes) on failure.
  int opus_multistream_encode_float(
    ffi.Pointer<OpusMSEncoder> st,
    ffi.Pointer<ffi.Float> pcm,
    int frame_size,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_data_bytes,
  ) {
    return _opus_multistream_encode_float(
      st,
      pcm,
      frame_size,
      data,
      max_data_bytes,
    );
  }

  late final _opus_multistream_encode_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSEncoder>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              opus_int32)>>('opus_multistream_encode_float');
  late final _opus_multistream_encode_float =
      _opus_multistream_encode_floatPtr.asFunction<
          int Function(ffi.Pointer<OpusMSEncoder>, ffi.Pointer<ffi.Float>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  /// Frees an <code>OpusMSEncoder</code> allocated by
  /// opus_multistream_encoder_create().
  /// @param st <tt>OpusMSEncoder*</tt>: Multistream encoder state to be freed.
  void opus_multistream_encoder_destroy(
    ffi.Pointer<OpusMSEncoder> st,
  ) {
    return _opus_multistream_encoder_destroy(
      st,
    );
  }

  late final _opus_multistream_encoder_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OpusMSEncoder>)>>(
      'opus_multistream_encoder_destroy');
  late final _opus_multistream_encoder_destroy =
      _opus_multistream_encoder_destroyPtr
          .asFunction<void Function(ffi.Pointer<OpusMSEncoder>)>();

  /// Perform a CTL function on a multistream Opus encoder.
  ///
  /// Generally the request and subsequent arguments are generated by a
  /// convenience macro.
  /// @param st <tt>OpusMSEncoder*</tt>: Multistream encoder state.
  /// @param request This and all remaining parameters should be replaced by one
  /// of the convenience macros in @ref opus_genericctls,
  /// @ref opus_encoderctls, or @ref opus_multistream_ctls.
  /// @see opus_genericctls
  /// @see opus_encoderctls
  /// @see opus_multistream_ctls
  int opus_multistream_encoder_ctl(
    ffi.Pointer<OpusMSEncoder> st,
    int request,
  ) {
    return _opus_multistream_encoder_ctl(
      st,
      request,
    );
  }

  late final _opus_multistream_encoder_ctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OpusMSEncoder>,
              ffi.Int)>>('opus_multistream_encoder_ctl');
  late final _opus_multistream_encoder_ctl = _opus_multistream_encoder_ctlPtr
      .asFunction<int Function(ffi.Pointer<OpusMSEncoder>, int)>();

  /// Gets the size of an <code>OpusMSDecoder</code> structure.
  /// @param streams <tt>int</tt>: The total number of streams coded in the
  /// input.
  /// This must be no more than 255.
  /// @param coupled_streams <tt>int</tt>: Number streams to decode as coupled
  /// (2 channel) streams.
  /// This must be no larger than the total
  /// number of streams.
  /// Additionally, The total number of
  /// coded channels (<code>streams +
  /// coupled_streams</code>) must be no
  /// more than 255.
  /// @returns The size in bytes on success, or a negative error code
  /// (see @ref opus_errorcodes) on error.
  int opus_multistream_decoder_get_size(
    int streams,
    int coupled_streams,
  ) {
    return _opus_multistream_decoder_get_size(
      streams,
      coupled_streams,
    );
  }

  late final _opus_multistream_decoder_get_sizePtr =
      _lookup<ffi.NativeFunction<opus_int32 Function(ffi.Int, ffi.Int)>>(
          'opus_multistream_decoder_get_size');
  late final _opus_multistream_decoder_get_size =
      _opus_multistream_decoder_get_sizePtr
          .asFunction<int Function(int, int)>();

  /// Allocates and initializes a multistream decoder state.
  /// Call opus_multistream_decoder_destroy() to release
  /// this object when finished.
  /// @param Fs <tt>opus_int32</tt>: Sampling rate to decode at (in Hz).
  /// This must be one of 8000, 12000, 16000,
  /// 24000, or 48000.
  /// @param channels <tt>int</tt>: Number of channels to output.
  /// This must be at most 255.
  /// It may be different from the number of coded
  /// channels (<code>streams +
  /// coupled_streams</code>).
  /// @param streams <tt>int</tt>: The total number of streams coded in the
  /// input.
  /// This must be no more than 255.
  /// @param coupled_streams <tt>int</tt>: Number of streams to decode as coupled
  /// (2 channel) streams.
  /// This must be no larger than the total
  /// number of streams.
  /// Additionally, The total number of
  /// coded channels (<code>streams +
  /// coupled_streams</code>) must be no
  /// more than 255.
  /// @param[in] mapping <code>const unsigned char[channels]</code>: Mapping from
  /// coded channels to output channels, as described in
  /// @ref opus_multistream.
  /// @param[out] error <tt>int *</tt>: Returns #OPUS_OK on success, or an error
  /// code (see @ref opus_errorcodes) on
  /// failure.
  ffi.Pointer<OpusMSDecoder> opus_multistream_decoder_create(
    int Fs,
    int channels,
    int streams,
    int coupled_streams,
    ffi.Pointer<ffi.UnsignedChar> mapping,
    ffi.Pointer<ffi.Int> error,
  ) {
    return _opus_multistream_decoder_create(
      Fs,
      channels,
      streams,
      coupled_streams,
      mapping,
      error,
    );
  }

  late final _opus_multistream_decoder_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OpusMSDecoder> Function(
              opus_int32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('opus_multistream_decoder_create');
  late final _opus_multistream_decoder_create =
      _opus_multistream_decoder_createPtr.asFunction<
          ffi.Pointer<OpusMSDecoder> Function(int, int, int, int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  /// Initialize a previously allocated decoder state object.
  /// The memory pointed to by \a st must be at least the size returned by
  /// opus_multistream_encoder_get_size().
  /// This is intended for applications which use their own allocator instead of
  /// malloc.
  /// To reset a previously initialized state, use the #OPUS_RESET_STATE CTL.
  /// @see opus_multistream_decoder_create
  /// @see opus_multistream_deocder_get_size
  /// @param st <tt>OpusMSEncoder*</tt>: Multistream encoder state to initialize.
  /// @param Fs <tt>opus_int32</tt>: Sampling rate to decode at (in Hz).
  /// This must be one of 8000, 12000, 16000,
  /// 24000, or 48000.
  /// @param channels <tt>int</tt>: Number of channels to output.
  /// This must be at most 255.
  /// It may be different from the number of coded
  /// channels (<code>streams +
  /// coupled_streams</code>).
  /// @param streams <tt>int</tt>: The total number of streams coded in the
  /// input.
  /// This must be no more than 255.
  /// @param coupled_streams <tt>int</tt>: Number of streams to decode as coupled
  /// (2 channel) streams.
  /// This must be no larger than the total
  /// number of streams.
  /// Additionally, The total number of
  /// coded channels (<code>streams +
  /// coupled_streams</code>) must be no
  /// more than 255.
  /// @param[in] mapping <code>const unsigned char[channels]</code>: Mapping from
  /// coded channels to output channels, as described in
  /// @ref opus_multistream.
  /// @returns #OPUS_OK on success, or an error code (see @ref opus_errorcodes)
  /// on failure.
  int opus_multistream_decoder_init(
    ffi.Pointer<OpusMSDecoder> st,
    int Fs,
    int channels,
    int streams,
    int coupled_streams,
    ffi.Pointer<ffi.UnsignedChar> mapping,
  ) {
    return _opus_multistream_decoder_init(
      st,
      Fs,
      channels,
      streams,
      coupled_streams,
      mapping,
    );
  }

  late final _opus_multistream_decoder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSDecoder>,
              opus_int32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('opus_multistream_decoder_init');
  late final _opus_multistream_decoder_init =
      _opus_multistream_decoder_initPtr.asFunction<
          int Function(ffi.Pointer<OpusMSDecoder>, int, int, int, int,
              ffi.Pointer<ffi.UnsignedChar>)>();

  /// Decode a multistream Opus packet.
  /// @param st <tt>OpusMSDecoder*</tt>: Multistream decoder state.
  /// @param[in] data <tt>const unsigned char*</tt>: Input payload.
  /// Use a <code>NULL</code>
  /// pointer to indicate packet
  /// loss.
  /// @param len <tt>opus_int32</tt>: Number of bytes in payload.
  /// @param[out] pcm <tt>opus_int16*</tt>: Output signal, with interleaved
  /// samples.
  /// This must contain room for
  /// <code>frame_size*channels</code>
  /// samples.
  /// @param frame_size <tt>int</tt>: The number of samples per channel of
  /// available space in \a pcm.
  /// If this is less than the maximum packet duration
  /// (120 ms; 5760 for 48kHz), this function will not be capable
  /// of decoding some packets. In the case of PLC (data==NULL)
  /// or FEC (decode_fec=1), then frame_size needs to be exactly
  /// the duration of audio that is missing, otherwise the
  /// decoder will not be in the optimal state to decode the
  /// next incoming packet. For the PLC and FEC cases, frame_size
  /// <b>must</b> be a multiple of 2.5 ms.
  /// @param decode_fec <tt>int</tt>: Flag (0 or 1) to request that any in-band
  /// forward error correction data be decoded.
  /// If no such data is available, the frame is
  /// decoded as if it were lost.
  /// @returns Number of samples decoded on success or a negative error code
  /// (see @ref opus_errorcodes) on failure.
  int opus_multistream_decode(
    ffi.Pointer<OpusMSDecoder> st,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
    ffi.Pointer<opus_int16> pcm,
    int frame_size,
    int decode_fec,
  ) {
    return _opus_multistream_decode(
      st,
      data,
      len,
      pcm,
      frame_size,
      decode_fec,
    );
  }

  late final _opus_multistream_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSDecoder>,
              ffi.Pointer<ffi.UnsignedChar>,
              opus_int32,
              ffi.Pointer<opus_int16>,
              ffi.Int,
              ffi.Int)>>('opus_multistream_decode');
  late final _opus_multistream_decode = _opus_multistream_decodePtr.asFunction<
      int Function(ffi.Pointer<OpusMSDecoder>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<opus_int16>, int, int)>();

  /// Decode a multistream Opus packet.
  /// @param st <tt>OpusMSDecoder*</tt>: Multistream decoder state.
  /// @param[in] data <tt>const unsigned char*</tt>: Input payload.
  /// Use a <code>NULL</code>
  /// pointer to indicate packet
  /// loss.
  /// @param len <tt>opus_int32</tt>: Number of bytes in payload.
  /// @param[out] pcm <tt>opus_int32*</tt>: Output signal, with interleaved
  /// samples representing (or slightly exceeding) 24-bit values.
  /// This must contain room for
  /// <code>frame_size*channels</code>
  /// samples.
  /// @param frame_size <tt>int</tt>: The number of samples per channel of
  /// available space in \a pcm.
  /// If this is less than the maximum packet duration
  /// (120 ms; 5760 for 48kHz), this function will not be capable
  /// of decoding some packets. In the case of PLC (data==NULL)
  /// or FEC (decode_fec=1), then frame_size needs to be exactly
  /// the duration of audio that is missing, otherwise the
  /// decoder will not be in the optimal state to decode the
  /// next incoming packet. For the PLC and FEC cases, frame_size
  /// <b>must</b> be a multiple of 2.5 ms.
  /// @param decode_fec <tt>int</tt>: Flag (0 or 1) to request that any in-band
  /// forward error correction data be decoded.
  /// If no such data is available, the frame is
  /// decoded as if it were lost.
  /// @returns Number of samples decoded on success or a negative error code
  /// (see @ref opus_errorcodes) on failure.
  int opus_multistream_decode24(
    ffi.Pointer<OpusMSDecoder> st,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
    ffi.Pointer<opus_int32> pcm,
    int frame_size,
    int decode_fec,
  ) {
    return _opus_multistream_decode24(
      st,
      data,
      len,
      pcm,
      frame_size,
      decode_fec,
    );
  }

  late final _opus_multistream_decode24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSDecoder>,
              ffi.Pointer<ffi.UnsignedChar>,
              opus_int32,
              ffi.Pointer<opus_int32>,
              ffi.Int,
              ffi.Int)>>('opus_multistream_decode24');
  late final _opus_multistream_decode24 =
      _opus_multistream_decode24Ptr.asFunction<
          int Function(
              ffi.Pointer<OpusMSDecoder>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<opus_int32>,
              int,
              int)>();

  /// Decode a multistream Opus packet with floating point output.
  /// @param st <tt>OpusMSDecoder*</tt>: Multistream decoder state.
  /// @param[in] data <tt>const unsigned char*</tt>: Input payload.
  /// Use a <code>NULL</code>
  /// pointer to indicate packet
  /// loss.
  /// @param len <tt>opus_int32</tt>: Number of bytes in payload.
  /// @param[out] pcm <tt>opus_int16*</tt>: Output signal, with interleaved
  /// samples.
  /// This must contain room for
  /// <code>frame_size*channels</code>
  /// samples.
  /// @param frame_size <tt>int</tt>: The number of samples per channel of
  /// available space in \a pcm.
  /// If this is less than the maximum packet duration
  /// (120 ms; 5760 for 48kHz), this function will not be capable
  /// of decoding some packets. In the case of PLC (data==NULL)
  /// or FEC (decode_fec=1), then frame_size needs to be exactly
  /// the duration of audio that is missing, otherwise the
  /// decoder will not be in the optimal state to decode the
  /// next incoming packet. For the PLC and FEC cases, frame_size
  /// <b>must</b> be a multiple of 2.5 ms.
  /// @param decode_fec <tt>int</tt>: Flag (0 or 1) to request that any in-band
  /// forward error correction data be decoded.
  /// If no such data is available, the frame is
  /// decoded as if it were lost.
  /// @returns Number of samples decoded on success or a negative error code
  /// (see @ref opus_errorcodes) on failure.
  int opus_multistream_decode_float(
    ffi.Pointer<OpusMSDecoder> st,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
    ffi.Pointer<ffi.Float> pcm,
    int frame_size,
    int decode_fec,
  ) {
    return _opus_multistream_decode_float(
      st,
      data,
      len,
      pcm,
      frame_size,
      decode_fec,
    );
  }

  late final _opus_multistream_decode_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OpusMSDecoder>,
              ffi.Pointer<ffi.UnsignedChar>,
              opus_int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('opus_multistream_decode_float');
  late final _opus_multistream_decode_float =
      _opus_multistream_decode_floatPtr.asFunction<
          int Function(
              ffi.Pointer<OpusMSDecoder>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.Float>,
              int,
              int)>();

  /// Perform a CTL function on a multistream Opus decoder.
  ///
  /// Generally the request and subsequent arguments are generated by a
  /// convenience macro.
  /// @param st <tt>OpusMSDecoder*</tt>: Multistream decoder state.
  /// @param request This and all remaining parameters should be replaced by one
  /// of the convenience macros in @ref opus_genericctls,
  /// @ref opus_decoderctls, or @ref opus_multistream_ctls.
  /// @see opus_genericctls
  /// @see opus_decoderctls
  /// @see opus_multistream_ctls
  int opus_multistream_decoder_ctl(
    ffi.Pointer<OpusMSDecoder> st,
    int request,
  ) {
    return _opus_multistream_decoder_ctl(
      st,
      request,
    );
  }

  late final _opus_multistream_decoder_ctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OpusMSDecoder>,
              ffi.Int)>>('opus_multistream_decoder_ctl');
  late final _opus_multistream_decoder_ctl = _opus_multistream_decoder_ctlPtr
      .asFunction<int Function(ffi.Pointer<OpusMSDecoder>, int)>();

  /// Frees an <code>OpusMSDecoder</code> allocated by
  /// opus_multistream_decoder_create().
  /// @param st <tt>OpusMSDecoder</tt>: Multistream decoder state to be freed.
  void opus_multistream_decoder_destroy(
    ffi.Pointer<OpusMSDecoder> st,
  ) {
    return _opus_multistream_decoder_destroy(
      st,
    );
  }

  late final _opus_multistream_decoder_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OpusMSDecoder>)>>(
      'opus_multistream_decoder_destroy');
  late final _opus_multistream_decoder_destroy =
      _opus_multistream_decoder_destroyPtr
          .asFunction<void Function(ffi.Pointer<OpusMSDecoder>)>();
}

final class OpusMSEncoder extends ffi.Opaque {}

final class OpusMSDecoder extends ffi.Opaque {}

typedef opus_int32 = ffi.Int32;
typedef Dartopus_int32 = int;
typedef opus_int16 = ffi.Int16;
typedef Dartopus_int16 = int;

const int OPUS_MULTISTREAM_GET_ENCODER_STATE_REQUEST = 5120;

const int OPUS_MULTISTREAM_GET_DECODER_STATE_REQUEST = 5122;
